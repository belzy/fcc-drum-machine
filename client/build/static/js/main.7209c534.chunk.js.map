{"version":3,"sources":["components/NavBar/index.js","components/DrumMachine/SoundButton/index.js","components/DrumMachine/index.js","components/App.js","serviceWorker.js","index.js","reducer.js","components/DrumMachine/assets/hats/hatOne.wav","components/DrumMachine/assets/hats/hatTwo.wav","components/DrumMachine/assets/hats/hatThree.wav","components/DrumMachine/assets/snares/snareOne.wav","components/DrumMachine/assets/snares/snareTwo.wav","components/DrumMachine/assets/snares/snareThree.wav","components/DrumMachine/assets/kicks/kickOne.wav","components/DrumMachine/assets/kicks/kickTwo.wav","components/DrumMachine/assets/kicks/kickThree.wav","logo.svg"],"names":["NavBar","classes","this","props","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","title","Component","withStyles","root","color","SoundButton","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","play","handleClick","bind","assertThisInitialized","handleKeyPress","setState","setTrack","track","e","preventDefault","window","event","String","fromCharCode","keyCode","which","keyPress","document","querySelector","concat","id","click","_this2","addEventListener","audio","currentTime","_this3","removeEventListener","Button_default","className","size","onClick","src","audioSrc","caption","margin","fontSize","styles","buttons","defineProperty","width","display","flexWrap","justifyContent","padding","DrumMachine","handle","keys","soundsArr","values","sounds","tracks","style","Paper_default","textAlign","map","i","DrumMachine_SoundButton","key","App","components_NavBar","components_DrumMachine","Boolean","location","hostname","match","store","createStore","arguments","length","undefined","ReactDOM","render","es","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7209c534.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n  root: {\r\n\r\n  },\r\n  title: {\r\n    color: 'white'\r\n  }\r\n};\r\n\r\nclass NavBar extends Component {\r\n\r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <AppBar position='static'>\r\n        <Toolbar>\r\n          <Typography variant='title' classes={{ title: classes.title }}>\r\n            Drum Machine\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(NavBar);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n  root: {\r\n    margin: '4px'\r\n  },\r\n  caption: {\r\n    fontSize: '26px'\r\n  }\r\n};\r\n\r\nclass SoundButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      play: false,\r\n    }\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.state.play === false ? this.setState({ play: true }) : this.setState({ play: false });\r\n    this.props.setTrack(this.props.track);\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    e.preventDefault();\r\n\r\n    e = e || window.event;\r\n    const key = String.fromCharCode(e.keyCode || e.which);\r\n    if (key == this.props.keyPress) {\r\n      this.state.play === false ? this.setState({ play: true }) : this.setState({ play: false });\r\n      document.querySelector(`.clip#${this.props.id}`).play();\r\n      document.querySelector(`.drum-pad#${this.props.id}`).click();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', e => {\r\n      this.handleKeyPress(e);\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const audio = document.querySelector(`.clip#${this.props.id}`);\r\n    if (this.state.play === true) {\r\n      audio.play();\r\n    } else {\r\n      if (audio.currentTime > 0) {\r\n        //audio.currentTime = 0;\r\n        //this.setState({ play: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', e => {\r\n      this.handleKeyPress(e);\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Button className='drum-pad' classes={{ root: classes.root }} id={`${this.props.id}`} variant='outlined' size='large' onClick={this.handleClick}>\r\n        <audio src={this.props.audioSrc} className='clip' id={`${this.props.id}`} />\r\n        <Typography variant='caption' classes={{ root: classes.caption }}>\r\n          {this.props.keyPress}\r\n        </Typography>\r\n\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SoundButton);\r\n","import React, { Component } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport SoundButton from './SoundButton/index';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport * as sounds from './assets/index';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n  buttons: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    padding: '8px',\r\n    width: '360px'\r\n  },\r\n}\r\n\r\nclass DrumMachine extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      track: '(Track)',\r\n    }\r\n\r\n    this.setTrack = this.setTrack.bind(this);\r\n\r\n  }\r\n\r\n  setTrack(track) {\r\n    this.setState({ track })\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handle);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n    const keys = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'];\r\n    const soundsArr = Object.values(sounds);\r\n    const tracks = ['Hat One', 'Hat Two', 'Hat Three', 'Kick One', 'Kick Two', 'Kick Three', 'Snare One', 'Snare Two', 'Snare Three'];\r\n\r\n    return (\r\n      <div id='drum-machine' style={{margin: '80px auto', display: 'flex', justifyContent: 'center'}}>\r\n        <Paper>\r\n          <div id='display' style={{textAlign: 'center', fontSize: '26px', margin: '0px'}}>\r\n            <h3>\r\n              {this.state.track}\r\n            </h3>\r\n          </div>\r\n          <div style={ styles.buttons }>\r\n            {soundsArr.map((src, i) => <SoundButton track={tracks[i]} setTrack={this.setTrack} key={i} audioSrc={src} id={keys[i]} keyPress={keys[i]} />)}\r\n          </div>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumMachine;\r\n","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport NavBar from './NavBar/index';\nimport DrumMachine from './DrumMachine/index';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <DrumMachine />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './reducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\n\r\nexport const rootReducer = (state = {}, action) => {\r\n  return state;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/hatOne.5a0899e0.wav\";","module.exports = __webpack_public_path__ + \"static/media/hatTwo.c16d8b6a.wav\";","module.exports = __webpack_public_path__ + \"static/media/hatThree.487574ba.wav\";","module.exports = __webpack_public_path__ + \"static/media/snareOne.2cae61c8.wav\";","module.exports = __webpack_public_path__ + \"static/media/snareTwo.d82dae6e.wav\";","module.exports = __webpack_public_path__ + \"static/media/snareThree.b0a0fb37.wav\";","module.exports = __webpack_public_path__ + \"static/media/kickOne.676c941e.wav\";","module.exports = __webpack_public_path__ + \"static/media/kickTwo.47bf0ffd.wav\";","module.exports = __webpack_public_path__ + \"static/media/kickThree.1798ae9d.wav\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}